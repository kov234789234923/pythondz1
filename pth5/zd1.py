# Тестирование функции с использованием assert

def average_num(list_num: list) -> float:
    for ind, el in enumerate(list_num):
        if not isinstance(el, int | float):
            try:
                list_num[ind] = int(el)
            except:
                return "Bad request"
    return round(sum(list_num) / len(list_num), 2)

def test_s():
    assert average_num([1, 2, 3, 4, 5]) == 3.0
    assert average_num([1, 2, 3]) == 2
    assert average_num([10, 20, 30, 40]) == 25
    assert average_num([1.5, 2.5, 3.5]) == 2.5
    assert average_num([0.1, 0.2, 0.3]) == 0.2
    assert average_num([1, 2.5, 3]) == 2.17
    assert average_num(['1', '2', '3']) == 2
    assert average_num([1, 2.5, "3"]) == 2.17
    assert average_num(['a', 'b', 'c']) == "Bad request"
    assert average_num([1, 2, 'xyz']) == "Bad request"

    print("Все тесты пройдены успешно!")

test_s()


# Пояснение кода:
# определяем функцию average_num, которая принимает один аргумент - список чисел
# Эта функция предназначена для вычисления среднего значения элементов списка,
# при этом она должна обрабатывать различные типы данных, которые могут находиться в списке.
# функция возвращает значение типа float
# Внутри функции начинается цикл, который перебирает
# все элементы списка с помощью функции enumerate
# Эта функция позволяет одновременно получать индекс элемента и сам элемент
# На каждой итерации цикла мы проверяем, является ли
# текущий элемент числом целым (int) или с плавающей точкой (float)
# если элемент не является ни целым, ни дробным числом,
# пытаемся преобразовать его в целое число с помощью функции
# int(el) что может быть полезно, если в списке находятся строки, представляющие собой числа
# если преобразование проходит успешно, мы заменяем текущий
# элемент в списке на его целочисленное значение но если
# преобразование не удается возникает исключение
# ловим это исключение и возвращаем строку "Bad request", что
# сигнализирует о том, что входные данные были некорректными
# когда все элементы списка обработаны, мы вычисляем среднее значение
# используем функцию sum, чтобы получить сумму всех элементов
# списка, и делим ее на количество элементов, используя функцию len.
# результат деления округляется до двух знаков после запятой с
# помощью функции round, и это значение возвращается как результат работы функции.
# в функции test_s тестируем функцию average_num.
# используем оператор assert, который проверяет, что результат
# выполнения функции соответствует ожидаемому значению
# если результат не совпадает с ожидаемым, будет вызвано исключение
# AssertionError, что указывает на ошибку в работе функции
# проверяем различные сценарии
#  сначала тестируем функцию на простых числах, чтобы убедиться, что
#  она правильно вычисляет среднее значение для целых чисел
# затем добавляем тесты с числами с плавающей точкой, чтобы проверить,
# как функция обрабатывает дробные числа
# также проверяем смешанные типы данных, включая целые числа и числа с
# плавающей точкой, а также строки, которые могут быть преобразованы в
# числа также тестируем случаи когда в списке находятся некорректные строки,
# чтобы убедиться, что функция возвращает "Bad request" в таких ситуациях
# в конце функции test_s выводим сообщение о том, что все тесты прошли успешно,
# если ни одно из утверждений не вызвало исключение

