# Тестирование корректности работы со строками

def is_palindrome(s: str) -> bool:
    left, right = 0, len(s) - 1
    while left < right:
        while left < right and not s[left].isalnum():
            left += 1
        while left < right and not s[right].isalnum():
            right -= 1
        if s[left].lower() != s[right].lower():
            return False
        left += 1
        right -= 1
    return True

def test_is_palindrome():
    assert is_palindrome("казак") == True
    assert is_palindrome("Peep") == True
    assert is_palindrome("Do geese see God") == True
    assert is_palindrome("Pull up if I pull up") == True
    assert is_palindrome("Лидер бодро, гордо бредил") == True
    assert is_palindrome("Не палиндром") == False

    assert is_palindrome("") == True
    assert is_palindrome("a") == True
    assert is_palindrome(" ") == True
    assert is_palindrome("  ") == True

    assert is_palindrome("Race fast, safe car!") == True
    assert is_palindrome("12321") == True
    assert is_palindrome("123321") == True
    assert is_palindrome("A1B2B1A") == True
    assert is_palindrome("A1B2C3") == False

    assert is_palindrome("Level") == True
    assert is_palindrome("LevEL") == True
    assert is_palindrome("Python") == False

    assert is_palindrome("!!!") == True
    assert is_palindrome(".,!") == True
    assert is_palindrome("..a..") == True

    print("Все тесты пройдены успешно!")

test_is_palindrome()

# Пояснение кода:
#
# функция is_palindrome принимает один аргумент - строку s
# функция предназначена для проверки, является ли строка палиндромом,
# и возвращает значение типа bool, то есть True или False.
# Палиндромом считается строка, которая читается одинаково как слева направо,
# так и справа налево, игнорируя пробелы, знаки препинания и регистр букв.
# внутри функции инициализируем две переменные: left, которая указывает на начало
# строки (индекс 0), и right, которая указывает на конец строки (индекс последнего символа)
# эти переменные будут использоваться для сравнения символов с обеих сторон строки
# начинаем с того, что left указывает на первый символ, а right — на последний
# далее начинается цикл while, который будет выполняться до тех
# пор, пока индекс left меньше индекса right
# это означает, что мы будем сравнивать символы, пока не достигнем середины строки
# внутри этого цикла мы сначала пропускаем небуквенные символы слева
# если текущий символ, на который указывает left, не является буквой или цифрой,
# мы увеличиваем индекс left, чтобы перейти к следующему символу
# это позволяет игнорировать пробелы и знаки препинания, которые
# не влияют на определение палиндрома
# аналогично пропускаем небуквенные символы справа
# если текущий символ, на который указывает right, не является буквой или цифрой,
# мы уменьшаем индекс right, чтобы перейти к предыдущему символу
# это также помогает игнорировать все символы, которые не имеют
# значения для проверки палиндрома
# После того как пропустили все небуквенные символы сравниваем символы, на
# которые указывают индексы left и right
# используем метод lower(), чтобы игнорировать регистр символов.
# "A" и "a" будут считаться одинаковыми
# если символы не совпадают, мы возвращаем False, что означает,
# что строка не является палиндромом
# если символы совпадают, мы увеличиваем индекс left и уменьшаем индекс right,
# чтобы перейти к следующим символам для дальнейшего сравнения.
# если мы прошли весь цикл и не нашли несовпадающих символов, это означает,
# что строка является палиндромом, и мы возвращаем True.
# функция test_is_palindrome предназначена для тестирования функции is_palindrome
# сначала тестируем функцию на известных палиндромах чтобы убедиться, что она
# правильно определяет палиндромы, игнорируя пробелы и знаки препинания
# также добавляем тесты для строк на кириллице чтобы проверить, как функция
# обрабатывает различные алфавиты
# Тестируем крайние случаи, такие как пустая строка или строка, состоящая только
# из пробелов, чтобы убедиться, что функция возвращает True для всех этих случаев
# мы проверяем строки, содержащие специальные символы и цифры, чтобы убедиться,
# что функция правильно обрабатывает такие случаи
# также тестируем строки, которые различаются только регистром, чтобы убедиться,
# что функция игнорирует регистр
# в конце функции test_is_palindrome мы выводим сообщение о том, что все тесты
# прошли успешно, если ни одно из утверждений не вызвало исключение
